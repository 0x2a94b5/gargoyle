<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="100%" height="100%"  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" onload="init(evt)" viewBox="0 0 1600 1200">
<!--
	This program is copyright 2008 Eric Bishop and is distributed under the terms of the GNU GPL 
	version 2.0 with a special clarification/exception that permits adapting the program to 
	configure proprietary "back end" software provided that all modifications to the web interface
	itself remain covered by the GPL. 
	See http://gargoyle-router.com/faq.html#qfoss for more information
-->
	<script type="text/ecmascript"> <![CDATA[
	var svgDoc;
	var topCoor=1;
	var leftCoor=1;
	var rightCoor=1600;
	var bottomCoor=1200;


	function init(evt)
	{
		svgDoc = evt.target.ownerDocument;
	}


	function plotAll(pointSets, numDisplayIntervals, intervalLength, lastTimePoint)
	{
		maxPoint=0;
		for(plotIndex=0; plotIndex < 3; plotIndex++)
		{
			if(pointSets[plotIndex] != null)
			{
				points=pointSets[plotIndex];
				for(pointIndex=0; pointIndex < points.length; pointIndex++)
				{
					maxPoint = 1*points[pointIndex] > 1*maxPoint ? points[pointIndex] : maxPoint;
				}
			}
		}

		


		var graphRightCoor=Math.floor(rightCoor*85/100);
		var graphBottomCoor=Math.floor(bottomCoor*85/100);
		var graphHeight = (graphBottomCoor-topCoor)+1;

		var borderEl = svgDoc.getElementById("graph-border");
		borderEl.setAttribute("width", graphRightCoor);
		borderEl.setAttribute("height", graphBottomCoor);
		borderEl.setAttribute("stroke", "black");
		borderEl.setAttribute("stroke-width", Math.ceil(.002*graphHeight) )


		var intervalSeconds = getIntervalSeconds(intervalLength);
		var xTickUnit = createXTicks(numDisplayIntervals, intervalSeconds, lastTimePoint, topCoor, graphBottomCoor, leftCoor, graphRightCoor)
		var graphYMax = createYTicks(xTickUnit, intervalSeconds, maxPoint, leftCoor, graphRightCoor, topCoor, graphBottomCoor)

		var pixelsPerInterval = graphRightCoor/(numDisplayIntervals-1);
		for(plotIndex=0; plotIndex < 3; plotIndex++)
		{
			if(pointSets[plotIndex] != null)
			{
				points= pointSets[plotIndex];
				plotPoints= [ graphRightCoor-Math.floor(points.length*pixelsPerInterval) + "," + graphBottomCoor ];
				var pointIndex;
				for(pointIndex = 0; pointIndex < points.length; pointIndex++)
				{
					point= points[pointIndex] >= 0 ? points[pointIndex] : 0;
					yDist= Math.floor(graphBottomCoor*point/graphYMax);
					plotPoints.push( graphRightCoor-Math.floor((points.length-(pointIndex+1))*pixelsPerInterval) + "," + (graphBottomCoor - yDist) );
				}
				plotPoints.push( graphRightCoor + "," + graphBottomCoor );
				svgDoc.getElementById("plot" + (plotIndex+1)).setAttribute("points", plotPoints.join(" "));
				svgDoc.getElementById("plot" + (plotIndex+1)).setAttribute("stroke-width", Math.ceil(.003*graphHeight) );
			}
			else
			{
				svgDoc.getElementById("plot" + (plotIndex+1)).setAttribute("points", "");

			}
		}
	}
	
	function getIntervalSeconds(intervalLength)
	{
		var intervalSeconds = 60;
		if(intervalLength == "second")
		{
			intervalSeconds = 1;
		}
		else if(intervalLength == "minute")
		{
			intervalSeconds = 60;
		}
		else if(intervalLength == "hour")
		{
			intervalSeconds = 60*60;
		}
		else if(intervalLength == "day")
		{
			intervalSeconds = 60*60*24;
		}
		else if(intervalLength == "month")
		{
			intervalSeconds = 60*60*24*28;
		}
		else
		{
			intervalSeconds = intervalLength;
		}
		return intervalSeconds;
	}


	function createYTicks(xTickUnit, intervalSeconds, maxPoint, graphLeft, graphRight, graphTop, graphBottom)
	{
		var timePoints;
		var yTimeUnit;
		var rateMultiple = 1024; //report in at least kilobytes

		rateMultiple = intervalSeconds*rateMultiple;
			

		if(xTickUnit == "minute")
		{
			yTimeUnit="s"; //bytes/s
		}
		else if(xTickUnit == "hour") 
		{
			yTimeUnit="s";  //bytes/s
		}
		else if(xTickUnit == "day") 
		{
			rateMultiple=rateMultiple/(60*60);
			yTimeUnit="hr"; //bytes/hr
		}
		else if(xTickUnit == "month") 
		{
			rateMultiple=rateMultiple/(60*60*24);
			yTimeUnit="day"; //bytes/day
		}

		maxRate = maxPoint/rateMultiple;

		
		maxLog = Math.floor(Math.log(maxRate)/Math.log(10));
		maxLogMultiple = 1+Math.floor(maxRate/Math.pow(10, maxLog));
		if(maxLogMultiple == 10)
		{
			maxLogMultiple = 1;
			maxLog = maxLog+1;
		}
		else if( maxLogMultiple == 2 && (2 - (maxRate/Math.pow(10, maxLog))) >= 0.5)
		{
			maxLogMultiple = 1.5;
		}
		if(maxLog < 1 && (maxLog <0 || maxLogMultiple < 5))
		{
			maxLog = 0;
			maxLogMultiple = 5;
		}


		var unit;
		var unitScaleFactor;
		if(maxLog < 3)
		{
			unit="KByte";
			unitScaleFactor=1;
		}
		else if(maxLog < 6)
		{
			unit="MByte";
			unitScaleFactor=Math.pow(10,3);
		}
		else if(maxLog < 9)
		{
			unit="GByte";
			unitScaleFactor=Math.pow(10,6);
		}
		else
		{
			unit="TByte";
			unitScaleFactor=Math.pow(10,9);
		}
		unit = unit + " / " + yTimeUnit;


		var tickSize;
		if(maxLogMultiple > 5)
		{
			tickSize = 2*Math.pow(10,maxLog);
		}
		else if(maxLogMultiple > 2)
		{
			tickSize = Math.pow(10,maxLog);
		}
		else
		{
			tickSize = 0.5 * Math.pow(10,maxLog);
		}
		
		yMax = 	maxLogMultiple * Math.pow(10,maxLog);

		var graphHeight = graphBottom-graphTop;
		svgDoc.getElementById("y-unit-container").setAttribute("font-size", .07*graphHeight);
		svgDoc.getElementById("y-unit-path").setAttribute("d", " M " + (graphRight+(.20*graphHeight) ) + " " + (Math.floor(.6*graphHeight)) + " L " + (graphRight+(.20*graphHeight)) + " " + 0);
		svgDoc.getElementById("y-units").firstChild.data = ""; //safari shits itself if label doesn't change
		svgDoc.getElementById("y-units").firstChild.data = unit;

		nextTick=0;
		tickNum=1;
		tickPath = "";
		while(nextTick < yMax)
		{
			yCoor= graphBottom - Math.floor((graphBottom-graphTop)*nextTick/yMax);
			if(nextTick != 0)
			{
				tickPath = tickPath + "M " + graphLeft + " " + yCoor + " L " + graphRight + " " + yCoor + " ";
			}
			
			tickLabel = (nextTick/unitScaleFactor);
			labelElement = svgDoc.getElementById("ytick-label" + tickNum);
			labelElement.style.display = "block";
			labelElement.setAttribute("x", graphRight+ (.02*graphHeight)   );
			labelElement.setAttribute("y", yCoor);
			labelElement.setAttribute("font-size", (.05*graphHeight) + "px" )
			labelElement.firstChild.data = ""; //safari shits itself if label doesn't change
			labelElement.firstChild.data = tickLabel;

			
			nextTick = nextTick + tickSize;
			tickNum++;
			
		}
		while(tickNum <= 7)
		{
			labelElement = svgDoc.getElementById("ytick-label" + tickNum);
			labelElement.style.display = "none";
			tickNum++
		}

		svgDoc.getElementById("yticks").setAttribute("d", tickPath);
		svgDoc.getElementById("yticks").setAttribute("stroke-width", Math.ceil(.003*graphHeight) );

		return rateMultiple * maxLogMultiple * Math.pow(10,maxLog); //return raw value of max value on graph
	}

	function createXTicks(numDisplayIntervals, intervalSeconds, lastTime, graphTop, graphBottom, graphLeft, graphRight)
	{
		var minTotalIntervalLength = intervalSeconds*numDisplayIntervals;

		var timeUnit = "minute";
		var majorTickMultiple;
		function getMajorTickMultiple( unitSeconds )
		{
			var m=1;
			while((m+1)*4*unitSeconds < minTotalIntervalLength) { m++; }
			return m;
		}
		if( minTotalIntervalLength < 4*60*60 )
		{
			timeUnit="minute";
			majorTickMultiple = getMajorTickMultiple(60);
		}
		else if( minTotalIntervalLength < 4*60*60*24)
		{
			timeUnit="hour";
			majorTickMultiple = getMajorTickMultiple(60*60);
		}
		else if( minTotalIntervalLength < 4*60*60*24*28)
		{
			timeUnit="day";
			majorTickMultiple = getMajorTickMultiple(60*60*24);
		}
		else if( minTotalIntervalLength < 4*60*60*24*28*12)
		{
			timeUnit="month";
			majorTickMultiple = getMajorTickMultiple(60*60*24*28);
		}


		var minorTickMultiple = (1/3);
		if(majorTickMultiple == 2)
		{
			minorTickMultiple = 1;
		}
		if(majorTickMultiple >= 3)
		{
			minorTickMultiple = Math.floor(majorTickMultiple/3); 
		}


		var graphHeight = graphBottom-graphTop;
		var firstTime = lastTime-(numDisplayIntervals*intervalSeconds);
		var nextMinorTick = getNextTick(timeUnit, minorTickMultiple, firstTime);
		var minorPathString= "";
		while( nextMinorTick < lastTime )
		{
			xCoor = graphLeft + Math.floor((graphRight-graphLeft)*(nextMinorTick - firstTime)/( lastTime-firstTime ));
			minorPathString= minorPathString + "M " + xCoor + " " + graphTop + " L " + xCoor + " " + graphBottom + " ";
			nextMinorTick = getNextTick(timeUnit, minorTickMultiple, nextMinorTick);
		}
		//alert(minorPathString);
		svgDoc.getElementById("x-minor-ticks").setAttribute("d", minorPathString);
		svgDoc.getElementById("x-minor-ticks").setAttribute("stroke-width", Math.ceil(.003*graphHeight) );
		
		
		

		majorPathString= "";
		tickNum = 1;
		var nextMajorTick = getNextTick(timeUnit, majorTickMultiple, firstTime);
		while(nextMajorTick < lastTime && tickNum <= 10)
		{
			xCoor = graphLeft + Math.floor((graphRight-graphLeft)*(nextMajorTick - firstTime)/(lastTime - firstTime));
			majorPathString= majorPathString + "M " + xCoor + " " + (graphBottom+1) + " L " + xCoor + " " + (graphBottom+Math.floor(.02*(graphBottom-graphTop))) + " ";


			tickLabel = "";
			tickDate = new Date();
			tickDate.setTime(nextMajorTick*1000);
			monthAbbreviations=["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
			if(timeUnit == "minute" || timeUnit == "hour")
			{
				tickLabel = tickDate.getHours() + ":" + (tickDate.getMinutes() >= 10 ? tickDate.getMinutes() : "0" + tickDate.getMinutes());
			}
			else if(timeUnit == "day")
			{
				tickLabel = monthAbbreviations[ tickDate.getMonth() ] + ". " + tickDate.getDate();
			}
			else
			{
				tickLabel = monthAbbreviations[ tickDate.getMonth() ] + ". " + tickDate.getFullYear();
			}
			labelElement = svgDoc.getElementById("major-xtick-label" + tickNum);
			labelElement.style.display = "block";
			labelElement.setAttribute("x", xCoor);
			labelElement.setAttribute("y", graphBottom + Math.ceil(.07*(graphBottom-graphTop))  );
			labelElement.setAttribute("font-size", Math.ceil(.05*graphHeight) + "px" )
			labelElement.firstChild.data = ""; //safari shits itself if label doesn't change
			labelElement.firstChild.data = tickLabel;
			

			var nt = getNextTick(timeUnit, majorTickMultiple, nextMajorTick);
			nextMajorTick = nt;
			tickNum++;
		}
		while(tickNum <= 10)
		{
			tickLabelId = "major-xtick-label" + tickNum;
			svgDoc.getElementById(tickLabelId).style.display = "none";
			svgDoc.getElementById(tickLabelId).firstChild.data = "";
			tickNum++;
		}
		svgDoc.getElementById("x-major-ticks").setAttribute("d", majorPathString);
		svgDoc.getElementById("x-major-ticks").setAttribute("stroke-width", Math.ceil(.003*graphHeight) );

		
		return timeUnit;
	}

	function getNextTick(unit, multiple, currentTime)
	{
		var currentDate = new Date();
		var nextDate = new Date();
		var incDate = new Date();
		currentDate.setTime(currentTime*1000);
		var nextTime = currentTime + 1;
		nextDate.setTime(nextTime*1000);
		if(unit == "minute")
		{
			nextDate.setSeconds(0);
			
			incDate.setTime(nextDate.valueOf());
			incDate.setMinutes( nextDate.getMinutes()+1);
			increment =  Math.floor(multiple*(incDate.valueOf()-nextDate.valueOf()));
		}
		else if(unit == "hour")
		{
			nextDate.setSeconds(0);
			nextDate.setMinutes(0);
			
			incDate.setTime(nextDate.valueOf());
			incDate.setHours(nextDate.getHours()+1);
		}
		else if(unit == "day")
		{
			nextDate.setSeconds(0);
			nextDate.setMinutes(0);
			nextDate.setHours(0);
			
			incDate.setTime(nextDate.valueOf());
			incDate.setDate(nextDate.getDate()+1);
		}
		else if(unit == "month")
		{
			nextDate.setSeconds(0);
			nextDate.setMinutes(0);
			nextDate.setHours(0);
			nextDate.setDate(1);
		
			incDate.setTime(nextDate.valueOf());
			incDate.setMonth(nextDate.getMonth()+1);
		}
		else if (unit == "year")
		{
			nextDate.setSeconds(0);
			nextDate.setMinutes(0);
			nextDate.setHours(0);
			nextDate.setDate(1);
			nextDate.setMonth(0);
			
			incDate.setTime(nextDate.valueOf());
			incDate.setFullYear(nextDate.getFullYear()+1);
		}
		var increment =  multiple*(incDate.valueOf()-nextDate.valueOf());
		while(nextDate.valueOf() <= currentDate.valueOf())
		{
			nextDate.setTime(nextDate.valueOf() + increment)
		}
	
		nextTime = Math.floor(nextDate.valueOf()/1000);
		return nextTime;
	}

	
	]]></script>




<rect id='graph-border' x='1' y='1' width='450' height='300' fill='none' stroke='white' stroke-width='1px' shape-rendering="crispEdges"  />	



<path id="x-minor-ticks" stroke='gray' fill='none' stroke-width="1px" opacity="0.5" shape-rendering="crispEdges" />
<path id="x-major-ticks" stroke='black' fill='none' stroke-width="2px" opacity="1.0" shape-rendering="crispEdges" />
<text id="major-xtick-label1" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label2" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label3" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label4" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label5" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label6" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label7" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label8" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label9" text-anchor="middle" font-family="serif" font-size="14px" >.</text>
<text id="major-xtick-label10" text-anchor="middle" font-family="serif" font-size="14px" >.</text>


<path id="yticks" stroke='gray' fill='none' stroke-width="1px" opacity="0.5" shape-rendering="crispEdges" />
<text id="ytick-label1" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label2" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label3" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label4" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label5" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label6" font-family="serif" font-size="14px" >.</text>
<text id="ytick-label7" font-family="serif" font-size="14px" >.</text>

<path id="y-unit-path" d="M 0 300 L 0 150" opacity="0" />
<use xlink:href="#y-unit-path" fill="none" opacity="0"  />
<text font-family="serif" font-size="18px" id="y-unit-container" ><textPath id="y-units" xlink:href="#y-unit-path" >.</textPath></text>


<polyline id="plot1" stroke-width="1px"  stroke='blue' fill="blue" opacity="0.75" fill-opacity="0.25"  />
<polyline id="plot2" stroke-width="1px"  stroke='red' fill="red" opacity="0.75" fill-opacity="0.25"  />
<polyline id="plot3" stroke-width="1px"  stroke='green' fill="green" opacity="0.75" fill-opacity="0.25"  />

</svg>

