#!/bin/sh /etc/rc.common

START=90

vsftpd_basedir="/tmp/vsftpd"
vsftpd_conf="$vsftpd_basedir/vsftpd.conf"
vsftpd_anonymous_root="/tmp/share_home/anonymous"

#####################################################################################################
#
# By default vsftpd is configured per-user, with each user having a home directory
# under which that user has control.  However, ideally we want to be able to specify
# things based on shared directories, with each user having (or not having) access to
# a given shared directory.  
# 
# So... what we do is give each user a home directory under /tmp/share_home/[user_name]
# The user root is not writable, but under the user root, we mount (using the bind option)
# the shares, which may or may not be writable.  We can't just symlink, since we chroot into 
# the user directory and symlinks don't work when we chroot.  Since the share name is 
# consistent, and we chroot for each user if we specify the same share for two different
# users, the url (minus user/pass) is the same, which is exactly what we want.  Also, we
# can bind directories readonly.  This is useful since if we can't specify directory
# permissions on a mounted drive, due to the drive being formatted with a non-unix 
# filesystem, we can still specify readonly mounts.
#
###################################################################################################





found_share="0"
got_lock=0



usb_lock()
{
	got_lock=0
	local timeout=15
	
	if [ ! -e /tmp/usb_restart.lock ] ; then
		touch /tmp/usb_restart.lock
		got_lock=1
	fi
	while [ "$timeout" -gt 0 ] && [ "$got_lock" = "0" ] ; do
		sleep 1
		timeout=$(( $timeout - 1 ))
		if [ ! -e /tmp/usb_restart.lock ] ; then
			touch /tmp/usb_restart.lock
			got_lock=1
		fi
	done

	echo "$got_lock"
}

usb_unlock()
{
	rm -rf /tmp/usb_restart.lock
}

check_mounted()
{
	local timeout=25
	local found=0
	if [ -e /tmp/mounted_usb_storage.tab ] ; then found=1 ; fi
	while [ "$timeout" -gt 0 ] && [ "$found" = "0" ] ; do
		sleep 1
		timeout=$(( $timeout - 1 ))
		if [ -e /tmp/mounted_usb_storage.tab ] ; then found=1 ; fi
	done
	echo "$found"
}


mount_share_dir()
{
	local username="$1"
	local share_id="$2"
	local write="$3"
	config_get share_dir "$share_id" share_dir
	if [ -z "$share_dir" ] ; then
		return
	fi
	if [ ! -d "$share_dir" ] ; then
		return
	fi

	local share_name
	local ftp_root
	config_get share_name "$share_id" "name"
	if [ -z "$share_name" ] ; then share_name="$share_id" ; fi

	if [ "$username" = "anonymous" ] || [ "$username" = "ftp" ] ; then
		config_get ftp_root "vsftpd" anonymous_root "/tmp/share_home/anonymous"
		username="anonymous"
	else	
		ftp_root=$(/sbin/uci get share_users.$username.home_dir 2>/dev/null)
	fi
	if [ -z "$ftp_root" ] ; then
		ftp_root="/tmp/share_home/$username"
	fi

	
	found_share="1"
	mkdir -p "$ftp_root/$share_name"  >/dev/null 2>&1
	chmod 755 "$ftp_root/$share_name" >/dev/null 2>&1


	chown "$username"  "$ftp_root/$share_name" >/dev/null 2>&1
	mount -o bind "$share_dir" "$ftp_root/$share_name" >/dev/null 2>&1
	if [ "$write" = "no" ] ; then
		mount -o remount,bind,ro "$ftp_root/$share_name" >/dev/null 2>&1
	fi

	# we can specify per-user write option in vsftpd config, though generally we won't use it
	config_get write "$username" write "yes"
	echo "write_enable=$write" > "$vsftpd_basedir/users/$username"


}
mount_share_rw()
{
	mount_share_dir "$1" "$2" "yes"
}
mount_share_ro()
{
	mount_share_dir "$1" "$2" "no"
}

unmount_user_share()
{
	local username="$1"
	local share_id="$2"

	local share_name
	config_get share_name "$share_id" "name"
	if [ -z "$share_name" ] ; then share_name="$share_id" ; fi

	if [ "$username" = "anonymous" ] || [ "$username" = "ftp" ] ; then
		config_get ftp_root "vsftpd" anonymous_root "/tmp/ftp/anonymous"
	else	
		ftp_root=$(/sbin/uci get share_users.$username.home_dir 2>/dev/null)
		if [ -z "$ftp_root" ] ; then
			ftp_root="/tmp/share_home/$username"
		fi
	fi
	umount  "$ftp_root/$share_name" >/dev/null 2>/dev/null
	rm -rf  "$ftp_root/$share_name" >/dev/null 2>/dev/null

}

unmount_share()
{
	local share_id="$1"
	config_list_foreach "$share_id" users_rw unmount_user_share "$share_id"
	config_list_foreach "$share_id" users_ro unmount_user_share "$share_id"

}


mount_share()
{
	local share_id="$1"
	config_list_foreach "$share_id" users_rw mount_share_rw "$share_id"
	config_list_foreach "$share_id" users_ro mount_share_ro "$share_id"
	
}

anonymous()
{
	config_get anonymous $1 anonymous "no"
	config_get anonymous_write $1 anonymous_write "no"
	config_get anonymous_root $1 anonymous_root "$vsftpd_anonymous_root"

	have_ftp_user=$(grep '^ftp:' /etc/passwd)
	if [ -z "$have_ftp_user" ] && [ "$anonymous" = "yes" ] ; then
		mkdir -p "$anonymous_root"
		chmod 555 "$anonymous_root" >/dev/null 2>&1
		echo "ftp:*:55:55:ftp:$anonymous_root:/bin/false" >> /etc/passwd
	fi
	if [ "$anonymous" = "yes" ] ; then
		if [ "$anonymous_write" = "yes" ]; then
			echo "write_enable=yes" > $vsftpd_basedir/users/ftp
		else
			echo "write_enable=no" > $vsftpd_basedir/users/ftp
		fi
	else
		echo "anonymous_enable=no" >> $vsftpd_conf
	fi
}

update_userlist()
{
	local username="$1"
	echo "$username" >> "$vsftpd_basedir/userlist"
}

create_config()
{
	mkdir -p /tmp/vsftpd
	sed -i '/:ftp_user:/d' /etc/passwd

	cat /etc/vsftpd.conf.template > "$vsftpd_conf"
	mkdir -p "$vsftpd_basedir/users/"
	rm       "$vsftpd_basedir/users/"*  2>/dev/null
	rm       "$vsftpd_basedir/userlist" 2>/dev/null
	touch    "$vsftpd_basedir/userlist"

	config_load "share_users"
	config_foreach update_userlist "user"


	mkdir -p /var/vsftpd/secure_chroot

	config_load "vsftpd"

}

do_start()
{
	create_config
	config_load "vsftpd"
	config_foreach anonymous "vsftpd"
	config_foreach mount_share "share"

	[ -e /etc/vsftpd.conf ] && echo "WARNING: Detected file /etc/vsftpd.conf. It will not be used."
	if [ "$found_share" != "1" ] ; then
		echo "WARNING: No shares defined, vsftpd will not be started"
	else
		start-stop-daemon  -S -x  /usr/sbin/vsftpd -- "$vsftpd_conf"
	fi
}

do_stop() {

	config_load "vsftpd"
	start-stop-daemon -K -x /usr/sbin/vsftpd 
	sleep 1
	config_foreach unmount_share "share"
}


stop()
{
	got_lock=$(usb_lock)
	if [ "$got_lock" = "1" ] ; then
		do_stop
		usb_unlock
	fi
}

start()
{
	mounted=$(check_mounted)
	logger "vsftpd init: mounted = $mounted"
	if [ "$mounted" = "1" ] ; then
		got_lock=$(usb_lock)
		logger "vsftpd init: got_lock = $got_lock"
		if [ "$got_lock" = "1" ] ; then
			do_start
			usb_unlock
		fi
	else
		echo "ERROR: No drives attached, no directories to share!"
	fi
}


restart()
{
	mounted=$(check_mounted)
	got_lock=$(usb_lock)
	if [ "$got_lock" = "1" ] ; then
		do_stop
		if [ "$mounted" = "1" ] ; then
			do_start
		fi
		usb_unlock
	fi
}


