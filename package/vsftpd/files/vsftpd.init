#!/bin/sh /etc/rc.common

START=50

vsftpd_basedir="/tmp/vsftpd"
vsftpd_conf="$vsftpd_basedir/vsftpd.conf"

#####################################################################################################
#
# By default vsftpd is configured per-user, with each user having a home directory
# under which that user has control.  However, ideally we want to be able to specify
# things based on shared directories, with each user having (or not having) access to
# a given shared directory.  
# 
# So... what we do is give each user a home directory under /tmp/ftp/[user_name]
# The user root is not writable, but under the user root, we mount (using the bind option)
# the shares, which may or may not be writable.  We can't just symlink, since we chroot into 
# the user directory and symlinks don't work when we chroot.  Since the share name is 
# consistent, and we chroot for each user if we specify the same share for two different
# users, the url (minus user/pass) is the same, which is exactly what we want.  Also, we
# can bind directories readonly.  This is useful since if we can't specify directory
# permissions on a mounted drive, due to the drive being formatted with a non-unix 
# filesystem, we can still specify readonly mounts.
#
###################################################################################################


mount_share_dir()
{
	local username="$1"
	local share_name="$2"
	local write="$3"
	config_get share_dir "$share_name" share_dir "/tmp/ftp/$username"
	if [ "$username" = "anonymous" ] || [ "$username" = "ftp" ] ; then
		config_get ftp_root "vsftpd" anonymous_root "/tmp/ftp/anonymous"
	else	
		config_get ftp_root "$username" root "/tmp/ftp/$username"
	fi
	
	mkdir -p "$ftp_root/$share_name"  >/dev/null 2>&1
	chmod 755 "$ftp_root/$share_name" >/dev/null 2>&1


	chown "$username"  "$ftp_root/$share_name" >/dev/null 2>&1
	mount -o bind "$share_dir" "$ftp_root/$share_name" >/dev/null 2>&1
	if [ "$write" = "no" ] ; then
		mount -o remount,bind,ro "$ftp_root/$share_name" >/dev/null 2>&1

	fi
}
mount_share_rw()
{
	mount_share_dir "$1" "$2" "yes"
}
mount_share_ro()
{
	mount_share_dir "$1" "$2" "no"
}

unmount_user_share()
{
	local username="$1"
	local share_name="$2"
	if [ "$username" = "anonymous" ] || [ "$username" = "ftp" ] ; then
		config_get ftp_root "vsftpd" anonymous_root "/tmp/ftp/anonymous"
	else	
		config_get ftp_root "$username" root "/tmp/ftp/$username"
	fi
	umount  "$ftp_root/$share_name" >/dev/null 2>/dev/null


}

unmount_share()
{
	local share_name="$1"
	config_list_foreach "$share_name" users_rw unmount_user_share "$share_name"
	config_list_foreach "$share_name" users_ro unmount_user_share "$share_name"

}


mount_share()
{
	local share_name="$1"
	config_list_foreach "$share_name" users_rw mount_share_rw "$share_name"
	config_list_foreach "$share_name" users_ro mount_share_ro "$share_name"
	
}

update_user()
{
	username="$1"
	if [ "$username" = "ftp" ] || [ "$username" = "anonymous" ] || [ "$username" = "root" ] || [ "$username" = "daemon" ] || [ "$username" = "network" ] || [ "$username" = "nobody" ] ; then
		echo "ERROR: Username '$username' is not allowed"
		return
	fi
	config_get password $1 password
	config_get write $1 write "yes"
	config_get ftp_root $1 root "/tmp/ftp/$username"





	# users should not own/be able to modify root ftp dir, just subdirectories
	# so set a mask of 755 and owner of root
	mkdir -p   "$ftp_root" >/dev/null 2>&1
	chmod 555  "$ftp_root" >/dev/null 2>&1
	chown root "$ftp_root" >/dev/null 2>&1
	chgrp root "$ftp_root" >/dev/null 2>&1

	
	
	echo "$username" >> $vsftpd_basedir/userlist

	group=$(cat /etc/group | grep "^$username:x:" | sed 's/.*:x://g' | sed 's/://g')
	if [ -z "$group" ] ; then
		group=1000
		tst=$(grep ":$group:" /etc/group)
		while [ -n "$tst" ] ; do
			group=$(($group+1))
			tst=$(grep ":$group:" /etc/group)
		done
		echo "$username:x:$group:" >> /etc/group
	fi

	user_line=$(grep "^$username:" /etc/passwd)
	if [ -z "$user_line" ] ; then
		user_num="$group"
		tst=$(grep ":.*:$user_num:.*:.*:/.*:/.*$" /etc/passwd)
		while [ -n "$tst" ] ; do
			user_num=$((user_num+1))
			tst=$(grep ":.*:$user_num:.*:.*:/.*:/.*$" /etc/passwd)
		done
		echo "$username:x:$user_num:$group:ftp_user:$ftp_root:/bin/false" >> /etc/passwd

		(echo "$password" ; echo "$password") | passwd "$username" >/dev/null 2>&1
	fi

	if [ "$write" = "yes" ]; then
		echo "write_enable=yes" > "$vsftpd_basedir/users/$username"
	else
		echo "write_enable=no"  > "$vsftpd_basedir/users/$username"
	fi

	chown "$username" "$ftp_root" >/dev/null 2>&1


}

anonymous()
{
	config_get anonymous $1 anonymous "no"
	config_get anonymous_write $1 anonymous_write "no"
	config_get anonymous_root $1 anonymous_root "/tmp/ftp/anonymous"

	if [ "$anonymous" = "yes" ]; then
		mkdir -p "$anonymous_root"
		chmod 555 "$anonymous_root" >/dev/null 2>&1

		echo "anonymous" >> $vsftpd_basedir/userlist
		echo "ftp" >> $vsftpd_basedir/userlist

		sed -i '/^ftp:*/d' /etc/passwd
		echo "ftp:*:55:55:ftp:$anonymous_root:/bin/false" >> /etc/passwd

		if [ "$anonymous_write" = "yes" ]; then
			echo "write_enable=yes" > $vsftpd_basedir/users/ftp
		else
			echo "write_enable=no" > $vsftpd_basedir/users/ftp
		fi
	else
		echo "anonymous_enable=no" >> $vsftpd_conf
	fi
}

create_config()
{
	mkdir -p /tmp/vsftpd
	sed -i '/:ftp_user:/d' /etc/passwd

	cat /etc/vsftpd.conf.template > $vsftpd_conf
	mkdir -p $vsftpd_basedir/users/
	rm $vsftpd_basedir/users/* 2>/dev/null
	rm $vsftpd_basedir/userlist 2>/dev/null
	touch $vsftpd_basedir/userlist
}

start()
{
	create_config
	config_load "vsftpd"
	config_foreach anonymous "vsftpd"
	config_foreach update_user "user"
	config_foreach mount_share "share"

	[ -e /etc/vsftpd.conf ] && echo "WARNING: Detected file /etc/vsftpd.conf. It will not be used."

	start-stop-daemon  -S -x  /usr/sbin/vsftpd -- "$vsftpd_conf"
}

stop() {

	config_load "vsftpd"
	start-stop-daemon -K -x /usr/sbin/vsftpd 
	sleep 1
	config_foreach unmount_share "share"
}
