#!/bin/sh /etc/rc.common
START=55

include /lib/network
include /usr/lib/gargoyle_firewall_util

backup_script="/tmp/do_bw_backup.sh"
tmp_cron="/tmp/tmp.cron"
download_table=filter
download_chain=bw_ingress
upload_table=mangle
upload_chain=bw_egress

bw_restore()
{
	bw_id="$1"
	backup_to_tmp="$2"
	
	if [ -e "/usr/data/bwmon/$bw_id.bw" ] ; then
		bw_set -i "$bw_id" -h -f /usr/data/bwmon/$bw_id.bw >/dev/null 2>&1
	elif [ -e "/tmp/data/bwmon/$bw_id.bw" ] ; then
		bw_set -i "$bw_id" -h -f /tmp/data/bwmon/$bw_id.bw >/dev/null 2>&1
	elif [ -e "/usr/data/bwmon/$bw_id" ] ; then
		bw_convert "/usr/data/bwmon/$bw_id" "/usr/data/bwmon/$bw_id.bw"
		rm "/usr/data/bwmon/$bw_id"
		bw_set -i "$bw_id" -h -f /usr/data/bwmon/$bw_id.bw >/dev/null 2>&1
	elif [ -e "/tmp/data/bwmon/$bw_id" ] ; then
		bw_convert "/tmp/data/bwmon/$bw_id" "/usr/data/bwmon/$bw_id.bw"
		rm "/tmp/data/bwmon/$bw_id"
		bw_set -i "$bw_id" -h -f /tmp/data/bwmon/$bw_id.bw >/dev/null 2>&1
	fi

	if [ -e "$tmp_cron" ] ; then
		if [ "$backup_to_tmp" = "1" ] ; then
			echo "bw_get -i \"$bw_id\" -h -f \"/tmp/data/bwmon/$bw_id.bw\" " >> "$backup_script"
		else
			echo "bw_get -i \"$bw_id\" -h -f \"/usr/data/bwmon/$bw_id.bw\" " >> "$backup_script"
		fi
	fi
}

update_cron()
{
	old_md5=$(md5sum /etc/crontabs/root)
	new_md5=$(md5sum "$tmp_cron")
	if [ "$old_md5" = "$new_md5" ] ; then
		rm "$tmp_cron"
	else
		mv "$tmp_cron" /etc/crontabs/root
		cron_active=$(ps | grep "crond" | grep -v "grep" )
		if [ -n "$cron_active" ] ; then
			/etc/init.d/cron restart
		fi
	fi
}


start()
{
	bw_if=$(uci -P "/var/state" get network.wan.ifname)
	if [ -z "$bw_if" ] ; then
		bw_if=$(uci -P "/var/state" get network.lan.ifname)	
	fi

	#mkdir -P doesn't work in busybox!  WTF??!
 	if [ ! -d /tmp/data/bwmon ] ; then 
 		rm -rf /tmp/data/bwmon 2>/dev/null
 		mkdir /tmp 2>/dev/null
 		mkdir /tmp/data 2>/dev/null
 		mkdir /tmp/data/bwmon 2>/dev/null
 	fi
	if [ ! -d /usr/data/bwmon ] ; then 
		rm -rf /usr/data/bwmon 2>/dev/null
		mkdir /usr/ 2>/dev/null
		mkdir /usr/data 2>/dev/null
		mkdir /usr/data/bwmon 2>/dev/null
	fi

	delete_chain_from_table $download_table $download_chain
	iptables -t $download_table -N $download_chain
	iptables -t $download_table -I INPUT $filter_insert_index  -i $bw_if -j $download_chain
	iptables -t $download_table -I FORWARD $filter_insert_index -i $bw_if -j $download_chain
	iptables -t $download_table -A $download_chain  #matches everything to monitor all download bandwidth


	
	delete_chain_from_table $upload_table $upload_chain
	iptables -t $upload_table -N $upload_chain
	iptables -t $upload_table -A POSTROUTING -o $bw_if -j $upload_chain
	
	minute_s=60;
	hour_s=$(($minute_s*60));
	day_s=$(($hour_s*24));


        total1_interval=2
        total1_num_intervals=449

	total2_interval=$((3*$minute_s))
	total2_num_intervals=480	        

	total3_interval="hour"
	total3_num_intervals=719
	
	total4_interval="day"
	total4_num_intervals=365

	bdist1_interval="minute"
	bdist1_num_intervals=15

	bdist2_interval="hour"
	bdist2_num_intervals=24

	bdist3_interval="day"
	bdist3_num_intervals=31

	bdist4_interval="month"
	bdist4_num_intervals=12



	iptables -t $download_table -A $download_chain -m bandwidth --id "total1A-download-$total1_interval-$total1_num_intervals" --reset_interval $total1_interval --intervals_to_save $total1_num_intervals
	iptables -t $upload_table -A $upload_chain  -m bandwidth --id "total1A-upload-$total1_interval-$total1_num_intervals" --reset_interval $total1_interval --intervals_to_save $total1_num_intervals	
	iptables -t $download_table -A $download_chain -m bandwidth --id "total1B-download-$bdist1_interval-$bdist1_num_intervals" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals
	iptables -t $upload_table -A $upload_chain  -m bandwidth --id "total1B-upload-$bdist1_interval-$bdist1_num_intervals" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals	
	ids="total1A-download-$total1_interval-$total1_num_intervals total1A-upload-$total1_interval-$total1_num_intervals" 
	ids="$ids total1B-download-$bdist1_interval-$bdist1_num_intervals total1B-upload-$bdist1_interval-$bdist1_num_intervals" 

	
	iptables -t $download_table -A $download_chain -m bandwidth --id "total2A-download-$total2_interval-$total2_num_intervals" --reset_interval $total2_interval --intervals_to_save $total2_num_intervals
	iptables -t $upload_table -A $upload_chain -m bandwidth --id "total2A-upload-$total2_interval-$total2_num_intervals" --reset_interval $total2_interval --intervals_to_save $total2_num_intervals
	iptables -t $download_table -A $download_chain -m bandwidth --id "total2B-download-$bdist2_interval-$bdist2_num_intervals" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals
	iptables -t $upload_table -A $upload_chain  -m bandwidth --id "total2B-upload-$bdist2_interval-$bdist2_num_intervals" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals	
	ids="$ids total2A-download-$total2_interval-$total2_num_intervals total2A-upload-$total2_interval-$total2_num_intervals" 
	ids="$ids total2B-download-$bdist2_interval-$bdist2_num_intervals total2B-upload-$bdist2_interval-$bdist2_num_intervals" 
	
	iptables -t $download_table -A $download_chain -m bandwidth --id "total3A-download-$total3_interval-$total3_num_intervals" --reset_interval $total3_interval --intervals_to_save $total3_num_intervals
	iptables -t $upload_table -A $upload_chain -m bandwidth --id "total3A-upload-$total3_interval-$total3_num_intervals" --reset_interval $total3_interval --intervals_to_save $total3_num_intervals
	iptables -t $download_table -A $download_chain -m bandwidth --id "total3B-download-$bdist3_interval-$bdist3_num_intervals" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals
	iptables -t $upload_table -A $upload_chain  -m bandwidth --id "total3B-upload-$bdist3_interval-$bdist3_num_intervals" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals	
	ids="$ids total3A-download-$total3_interval-$total3_num_intervals total3A-upload-$total3_interval-$total3_num_intervals" 
	ids="$ids total3B-download-$bdist3_interval-$bdist3_num_intervals total3B-upload-$bdist3_interval-$bdist3_num_intervals" 
	
	iptables -t $download_table -A $download_chain -m bandwidth --id "total4A-download-$total4_interval-$total4_num_intervals" --reset_interval $total4_interval --intervals_to_save $total4_num_intervals
	iptables -t $upload_table -A $upload_chain -m bandwidth --id "total4A-upload-$total4_interval-$total4_num_intervals" --reset_interval $total4_interval --intervals_to_save $total4_num_intervals
	iptables -t $download_table -A $download_chain -m bandwidth --id "total4B-download-$bdist4_interval-$bdist4_num_intervals" --reset_interval $bdist4_interval --intervals_to_save $bdist4_num_intervals
	iptables -t $upload_table -A $upload_chain  -m bandwidth --id "total4B-upload-$bdist4_interval-$bdist4_num_intervals" --reset_interval $bdist4_interval --intervals_to_save $bdist4_num_intervals	
	ids="$ids total4A-download-$total4_interval-$total4_num_intervals total4A-upload-$total4_interval-$total4_num_intervals" 
	ids="$ids total4B-download-$bdist4_interval-$bdist4_num_intervals total4B-upload-$bdist4_interval-$bdist4_num_intervals" 

	
	#bandwidth distribution monitoring (lower resolution, but retain data for ALL IPs)
	lan_mask=$(uci -p /tmp/state get network.lan.netmask 2>/dev/null)
	lan_ip=$(uci -p /tmp/state get network.lan.ipaddr 2>/dev/null)
	if [ -n "$lan_mask" ] && [ -n "$lan_ip" ] ; then
		lan_subnet="$lan_ip/$lan_mask"
		iptables -t $download_table -A $download_chain -m bandwidth --id "bdist1-download-$bdist1_interval-$bdist1_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals
		iptables -t $upload_table -A $upload_chain -m bandwidth --id "bdist1-upload-$bdist1_interval-$bdist1_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals
		ids="$ids bdist1-download-$bdist1_interval-$bdist1_num_intervals bdist1-upload-$bdist1_interval-$bdist1_num_intervals" 

		iptables -t $download_table -A $download_chain -m bandwidth --id "bdist2-download-$bdist2_interval-$bdist2_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals
		iptables -t $upload_table -A $upload_chain -m bandwidth --id "bdist2-upload-$bdist2_interval-$bdist2_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals
		ids="$ids bdist2-download-$bdist2_interval-$bdist2_num_intervals bdist2-upload-$bdist2_interval-$bdist2_num_intervals" 
	
		iptables -t $download_table -A $download_chain -m bandwidth --id "bdist3-download-$bdist3_interval-$bdist3_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals
		iptables -t $upload_table -A $upload_chain -m bandwidth --id "bdist3-upload-$bdist3_interval-$bdist3_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals
		ids="$ids bdist3-download-$bdist3_interval-$bdist3_num_intervals bdist3-upload-$bdist3_interval-$bdist3_num_intervals" 

		iptables -t $download_table -A $download_chain -m bandwidth --id "bdist4-download-$bdist4_interval-$bdist4_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist4_interval --intervals_to_save $bdist4_num_intervals
		iptables -t $upload_table -A $upload_chain -m bandwidth --id "bdist4-upload-$bdist4_interval-$bdist4_num_intervals" --type "individual_local" --subnet "$lan_subnet" --reset_interval $bdist4_interval --intervals_to_save $bdist4_num_intervals
		ids="$ids bdist4-download-$bdist4_interval-$bdist4_num_intervals bdist4-upload-$bdist4_interval-$bdist4_num_intervals" 
	fi


	qos_enabled=$(ls /etc/rc.d/*qos_gargoyle 2>/dev/null)
	if [ -n "$qos_enabled" ] && [ -e /etc/qos_class_marks ] ; then
		qos_table="mangle"
		qos_upload_chain="qos_egress"
		qos_download_chain="qos_ingress"

		upload_data=$(cat /etc/qos_class_marks | awk ' { if($1 == "upload"){print "up-"$2":"$3"/"$4};}' )
		download_data=$(cat /etc/qos_class_marks | awk ' { if($1 == "download"){print "down-"$2":"$3"/"$4};}' )

		for upload_info in $upload_data ; do
			mark=$(echo $upload_info | awk ' BEGIN { FS=":";} { print $2; }')
			class=$(echo $upload_info | awk ' BEGIN { FS=":";} { print $1; }')

			iptables -t $upload_table -A $upload_chain -m connmark --mark $mark -m bandwidth --id "qos1-$class-$bdist1_interval-$bdist1_num_intervals" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals
			iptables -t $upload_table -A $upload_chain -m connmark --mark $mark -m bandwidth --id "qos2-$class-$bdist2_interval-$bdist2_num_intervals" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals
			iptables -t $upload_table -A $upload_chain -m connmark --mark $mark -m bandwidth --id "qos3-$class-$bdist3_interval-$bdist3_num_intervals" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals
			ids="$ids qos1-$class-$bdist1_interval-$bdist1_num_intervals qos2-$class-$bdist2_interval-$bdist2_num_intervals qos3-$class-$bdist3_interval-$bdist3_num_intervals"
		done
		
		
		for download_info in $download_data ; do
			mark=$(echo $download_info | awk ' BEGIN { FS=":";} { print $2; }')
			class=$(echo $download_info | awk ' BEGIN { FS=":";} { print $1; }')
			
			iptables -t $download_table -A $download_chain -m connmark --mark $mark -m bandwidth --id "qos1-$class-$bdist1_interval-$bdist1_num_intervals" --reset_interval $bdist1_interval --intervals_to_save $bdist1_num_intervals
			iptables -t $download_table -A $download_chain -m connmark --mark $mark -m bandwidth --id "qos2-$class-$bdist2_interval-$bdist2_num_intervals" --reset_interval $bdist2_interval --intervals_to_save $bdist2_num_intervals
			iptables -t $download_table -A $download_chain -m connmark --mark $mark -m bandwidth --id "qos3-$class-$bdist3_interval-$bdist3_num_intervals" --reset_interval $bdist3_interval --intervals_to_save $bdist3_num_intervals
			ids="$ids qos1-$class-$bdist1_interval-$bdist1_num_intervals qos2-$class-$bdist2_interval-$bdist2_num_intervals qos3-$class-$bdist3_interval-$bdist3_num_intervals"
		done
	fi

	touch /etc/crontabs/root
	cat /etc/crontabs/root | grep -v "$backup_script" > "$tmp_cron"
	echo "0 0,4,8,12,16,20 * * * $backup_script" >> "$tmp_cron"
	
	echo "#!/bin/sh" > "$backup_script"
	chmod 700 "$backup_script"
	

	for i in $ids ; do
		is_total1=$(echo "$i" | grep "total1")
		is_total2=$(echo "$i" | grep "total2")
		is_bdist1=$(echo "$i" | grep "bdist1")
		is_bdist2=$(echo "$i" | grep "bdist2")
		is_qos1=$(echo "$i" | grep "qos1")
		is_qos2=$(echo "$i" | grep "qos2")
		if [ -n "$is_total1" ] || [ -n "$is_total2" ] || [ -n "$is_bdist1" ] || [ -n "$is_bdist2" ] || [ -n "$is_qos1" ] || [ -n "$is_qos2" ]  ; then
			bw_restore "$i" 1
		else
			bw_restore "$i" 0
		fi
	done

	update_cron 
}

stop()
{
	touch /etc/crontabs/root

	sh "$backup_script"
	rm "$backup_script"

	cat /etc/crontabs/root | grep -v "$backup_script"> "$tmp_cron"
	update_cron
	
	delete_chain_from_table $download_table $download_chain
	delete_chain_from_table $upload_table $upload_chain
}

restart()
{
	stop ;
	start ;
}
