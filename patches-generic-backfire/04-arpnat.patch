Index: b/include/netfilter.mk
===================================================================
--- a/include/netfilter.mk	(revision 17618)
+++ b/include/netfilter.mk	(working copy)
@@ -59,6 +59,8 @@
 $(eval $(call nf_add,EBTABLES,CONFIG_BRIDGE_EBT_REDIRECT, $(P_EBT)ebt_redirect))
 $(eval $(call nf_add,EBTABLES_IP4,CONFIG_BRIDGE_EBT_SNAT, $(P_EBT)ebt_snat))
 
+$(eval $(call nf_add,EBTABLES,CONFIG_BRIDGE_EBT_ARPNAT, $(P_EBT)ebt_arpnat))
+
 # watchers
 $(eval $(call nf_add,EBTABLES_WATCHERS,CONFIG_BRIDGE_EBT_LOG, $(P_EBT)ebt_log))
 $(eval $(call nf_add,EBTABLES_WATCHERS,CONFIG_BRIDGE_EBT_ULOG, $(P_EBT)ebt_ulog))
Index: b/target/linux/generic-2.6/config-2.6.30
===================================================================
--- a/target/linux/generic-2.6/config-2.6.30	(revision 17618)
+++ b/target/linux/generic-2.6/config-2.6.30	(working copy)
@@ -224,27 +224,28 @@
 # CONFIG_BPQETHER is not set
 # CONFIG_BRIDGE_EBT_802_3 is not set
 # CONFIG_BRIDGE_EBT_AMONG is not set
-# CONFIG_BRIDGE_EBT_ARP is not set
-# CONFIG_BRIDGE_EBT_ARPREPLY is not set
-# CONFIG_BRIDGE_EBT_BROUTE is not set
-# CONFIG_BRIDGE_EBT_DNAT is not set
-# CONFIG_BRIDGE_EBT_IP6 is not set
-# CONFIG_BRIDGE_EBT_IP is not set
-# CONFIG_BRIDGE_EBT_LIMIT is not set
-# CONFIG_BRIDGE_EBT_LOG is not set
-# CONFIG_BRIDGE_EBT_MARK is not set
-# CONFIG_BRIDGE_EBT_MARK_T is not set
-# CONFIG_BRIDGE_EBT_NFLOG is not set
-# CONFIG_BRIDGE_EBT_PKTTYPE is not set
-# CONFIG_BRIDGE_EBT_REDIRECT is not set
-# CONFIG_BRIDGE_EBT_SNAT is not set
-# CONFIG_BRIDGE_EBT_STP is not set
-# CONFIG_BRIDGE_EBT_T_FILTER is not set
-# CONFIG_BRIDGE_EBT_T_NAT is not set
-# CONFIG_BRIDGE_EBT_ULOG is not set
-# CONFIG_BRIDGE_EBT_VLAN is not set
-# CONFIG_BRIDGE_NETFILTER is not set
-# CONFIG_BRIDGE_NF_EBTABLES is not set
+CONFIG_BRIDGE_EBT_ARP=m
+CONFIG_BRIDGE_EBT_ARPREPLY=m
+CONFIG_BRIDGE_EBT_BROUTE=m
+CONFIG_BRIDGE_EBT_DNAT=m
+CONFIG_BRIDGE_EBT_IP6=m
+CONFIG_BRIDGE_EBT_IP=m
+CONFIG_BRIDGE_EBT_LIMIT=m
+CONFIG_BRIDGE_EBT_LOG=m
+CONFIG_BRIDGE_EBT_MARK=m
+CONFIG_BRIDGE_EBT_MARK_T=m
+CONFIG_BRIDGE_EBT_NFLOG=m
+CONFIG_BRIDGE_EBT_PKTTYPE=m
+CONFIG_BRIDGE_EBT_REDIRECT=m
+CONFIG_BRIDGE_EBT_SNAT=m
+CONFIG_BRIDGE_EBT_ARPNAT=m
+CONFIG_BRIDGE_EBT_STP=m
+CONFIG_BRIDGE_EBT_T_FILTER=m
+CONFIG_BRIDGE_EBT_T_NAT=m
+CONFIG_BRIDGE_EBT_ULOG=m
+CONFIG_BRIDGE_EBT_VLAN=m
+CONFIG_BRIDGE_NETFILTER=m
+CONFIG_BRIDGE_NF_EBTABLES=m
 CONFIG_BRIDGE=y
 # CONFIG_BROADCOM_PHY is not set
 CONFIG_BROKEN_ON_SMP=y
Index: b/package/ebtables/patches/100-arpnat.patch
===================================================================
--- a/package/ebtables/patches/100-arpnat.patch	(revision 0)
+++ b/package/ebtables/patches/100-arpnat.patch	(revision 0)
@@ -0,0 +1,131 @@
+--- old-ebtables/extensions/ebt_nat.c	2009-09-20 19:06:39.000000000 -0400
++++ ebtables-v2.0.9-1/extensions/ebt_nat.c	2009-09-20 18:50:07.000000000 -0400
+@@ -21,6 +21,9 @@
+ #define NAT_S_TARGET '2'
+ #define NAT_D_TARGET '2'
+ #define NAT_S_ARP '3'
++
++#define NAT_ARP_TARGET '2'
++
+ static struct option opts_s[] =
+ {
+ 	{ "to-source"     , required_argument, 0, NAT_S },
+@@ -30,6 +33,13 @@
+ 	{ 0 }
+ };
+ 
++static struct option opts_arpnat[] =
++{
++	{ "arpnat-target"   , required_argument, 0, NAT_ARP_TARGET },
++	{ 0 }
++};
++
++
+ static struct option opts_d[] =
+ {
+ 	{ "to-destination", required_argument, 0, NAT_D },
+@@ -47,6 +57,13 @@
+ 	" --snat-arp             : also change src address in arp msg\n");
+ }
+ 
++static void print_help_arpnat()
++{
++	printf(
++	"arpnat options:\n"
++	" --arpnat-target target   : ACCEPT, DROP, RETURN or CONTINUE\n");
++}
++
+ static void print_help_d()
+ {
+ 	printf(
+@@ -73,6 +90,57 @@
+ 	return;
+ }
+ 
++static void init_arpnat(struct ebt_entry_target *target)
++{
++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
++
++	natinfo->target = EBT_ACCEPT;
++	return;
++}
++#define OPT_ARPNAT_TARGET 0x2
++static int parse_arpnat(int c, char **argv, int argc,
++   const struct ebt_u_entry *entry, unsigned int *flags,
++   struct ebt_entry_target **target)
++{
++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)(*target)->data;
++
++	switch (c) {
++	case NAT_ARP_TARGET:
++		ebt_check_option2(flags, OPT_ARPNAT_TARGET);
++		if (FILL_TARGET(optarg, natinfo->target))
++			ebt_print_error2("Illegal --arpnat-target target");
++		break;
++	default:
++		return 0;
++	}
++	return 1;
++}
++
++static void final_check_arpnat(const struct ebt_u_entry *entry,
++   const struct ebt_entry_target *target, const char *name,
++   unsigned int hookmask, unsigned int time)
++{
++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
++
++	if (BASE_CHAIN && natinfo->target == EBT_RETURN)
++		ebt_print_error("--arpnat-target RETURN not allowed on base chain");
++	CLEAR_BASE_CHAIN_BIT;
++	if (((hookmask & ~((1 << NF_BR_PRE_ROUTING) | (1 << NF_BR_POST_ROUTING)))
++	   || strcmp(name, "nat")))
++		ebt_print_error("Wrong chain for arpnat");
++}
++
++static void print_arpnat(const struct ebt_u_entry *entry,
++   const struct ebt_entry_target *target)
++{
++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
++
++	printf(" --arpnat-target %s", TARGET_NAME(natinfo->target));
++}
++
++
++
++
+ #define OPT_SNAT         0x01
+ #define OPT_SNAT_TARGET  0x02
+ #define OPT_SNAT_ARP     0x04
+@@ -230,9 +298,23 @@
+ 	.compare	= compare,
+ 	.extra_ops	= opts_d,
+ };
++static struct ebt_u_target arpnat_target =
++{
++	.name		= EBT_ARPNAT_TARGET,
++	.size		= sizeof(struct ebt_nat_info),
++	.help		= print_help_arpnat,
++	.init		= init_arpnat,
++	.parse		= parse_arpnat,
++	.final_check	= final_check_arpnat,
++	.print		= print_arpnat,
++	.compare	= compare,
++	.extra_ops	= opts_arpnat,
++};
++
+ 
+ void _init(void)
+ {
+ 	ebt_register_target(&snat_target);
+ 	ebt_register_target(&dnat_target);
++	ebt_register_target(&arpnat_target);
+ }
+--- old-ebtables/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 19:06:39.000000000 -0400
++++ ebtables-v2.0.9-1/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 18:53:58.000000000 -0400
+@@ -10,5 +10,5 @@
+ };
+ #define EBT_SNAT_TARGET "snat"
+ #define EBT_DNAT_TARGET "dnat"
+-
++#define EBT_ARPNAT_TARGET "arpnat"
+ #endif
Index: b/package/madwifi/files/etc/hotplug.d/net/20-client_bridge
===================================================================
--- a/package/madwifi/files/etc/hotplug.d/net/20-client_bridge	(revision 0)
+++ b/package/madwifi/files/etc/hotplug.d/net/20-client_bridge	(revision 0)
@@ -0,0 +1,51 @@
+######################################################################
+# Client bridge hotplug script (/etc/hotplug.d/net/20-client_bridge)
+# Copyright Eric Bishop, 2009 eric@gargoyle-router.com 
+# Created for Gargoyle, www.gargoyle-router.com
+#
+#This is free software licensed under the terms of the GNU GPL v2.0
+# 
+# You must have the arpnat ebtables module for this to work
+######################################################################
+is_ath=$(echo $INTERFACE | grep ath)
+if [ -n "$is_ath" ] ; then
+	if [ "$ACTION" = "add" -o "$ACTION" = "register" ] ; then
+		sleep 2
+		managed=$(iwconfig $INTERFACE 2>/dev/null | grep "Mode:Managed")
+		if [ -n "$managed" ] ; then
+			sta_section=$(uci show wireless | grep "mode=sta$" | sed 's/\.mode=sta$//g' )			
+			if [ -n "$sta_section" ] ; then
+				client_bridge=$(uci get "$sta_section.client_bridge")
+				if [ "$client_bridge" = "1" ] ; then
+					ebtables -t nat -F PREROUTING
+					ebtables -t nat -F POSTROUTING
+					ebtables -t broute -F BROUTING
+				
+					#bridge_ip=$(uci get network.lan.ipaddr)
+					#if [ -n "$bridge_ip" ] ; then
+					#	#always arpnat DHCP
+					#	ebtables -t nat -A PREROUTING  --in-interface  $INTERFACE  -p IPv4 --ip-protocol UDP --ip-destination-port 67:68 -j arpnat --arpnat-target ACCEPT
+					#	ebtables -t nat -A PREROUTING  --in-interface  $INTERFACE  -p IPv4 --ip-protocol UDP --ip-source-port      67:68 -j arpnat --arpnat-target ACCEPT
+					#	
+					#	#but in order to allow access to router from external network don't arpnat anything else destined for bridge device
+					#	ebtables -t nat -A PREROUTING  -p IPv4 --ip-dst $bridge_ip -j redirect --redirect-target ACCEPT
+					#fi
+					
+					ebtables -t nat -A PREROUTING  --in-interface  $INTERFACE -j arpnat --arpnat-target ACCEPT
+					ebtables -t nat -A POSTROUTING --out-interface $INTERFACE -j arpnat --arpnat-target ACCEPT
+					ebtables -t broute -A BROUTING --in-interface  $INTERFACE --protocol 0x888e -j DROP
+					
+					mkdir -p /tmp/client_bridge
+					touch "/tmp/client_bridge/$INTERFACE"
+				fi
+			fi
+		fi
+	fi
+	if [ "$ACTION" = "remove" -o "$ACTION" = "register" ] ; then
+		if [ -e "/tmp/client_bridge/$INTERFACE" ] ; then
+			ebtables -t nat -F PREROUTING
+			ebtables -t nat -F POSTROUTING
+			ebtables -t broute -F BROUTING
+		fi			
+	fi
+fi
Index: b/target/linux/generic-2.6/patches-2.6.30/701-arpnat.patch
===================================================================
--- /dev/null	2010-05-13 10:11:58.394584532 -0400
+++ b/target/linux/generic-2.6/patches-2.6.30/701-arpnat.patch	2010-05-27 16:37:30.000000000 -0400
@@ -0,0 +1,539 @@
+--- /dev/null	2010-05-13 10:11:58.394584532 -0400
++++ linux-2.6.30.10/net/bridge/netfilter/ebt_arpnat.c	2010-05-27 14:43:32.000000000 -0400
+@@ -0,0 +1,483 @@
++/*
++ *  ebt_arpnat
++ *
++ *	Authors:
++ *      Kestutis Barkauskas <gpl@wilibox.com>
++ *
++ *  November, 2005
++ *
++ */
++
++#include <linux/netfilter/x_tables.h>
++#include <linux/netfilter_bridge/ebtables.h>
++#include <linux/netfilter_bridge/ebt_nat.h>
++#include <linux/module.h>
++#include <linux/if_arp.h>
++#include <linux/if_ether.h>
++#include <linux/if_pppox.h>
++#include <linux/if_vlan.h>
++#include <linux/rtnetlink.h>
++#include <linux/list.h>
++#include <linux/spinlock.h>
++#include <linux/proc_fs.h>
++#include <linux/inetdevice.h>
++#include <net/arp.h>
++#include <net/ip.h>
++#include <linux/ip.h>
++#include <linux/udp.h>
++#include <linux/in.h>
++#include <net/checksum.h>
++
++
++#include "../br_private.h"
++
++#define STRMAC "%02x:%02x:%02x:%02x:%02x:%02x"
++#define STRIP "%d.%d.%d.%d"
++#define MAC2STR(x) (x)[0],(x)[1],(x)[2],(x)[3],(x)[4],(x)[5]
++#define IP2STR(x) (x)>>24&0xff,(x)>>16&0xff,(x)>>8&0xff,(x)&0xff
++
++#define FLUSHTIMEOUT (60*10) /* 10 minutes to expire */
++#define GIADDR_OFFSET (24)
++
++#ifdef DEBUG
++#define __STATIC
++static uint8_t debug = 1;
++#else
++#define __STATIC static
++static uint8_t debug = 0;
++#endif
++
++#ifndef __packed
++#define __packed __attribute__((__packed__))
++#endif
++
++struct arpnat_dat {
++    uint32_t ip;
++    uint32_t expires;
++    uint8_t mac[ETH_ALEN];
++} __packed;
++
++struct mac2ip {
++    struct hlist_node node;
++    struct arpnat_dat data;
++};
++
++static HLIST_HEAD(arpnat_table);
++static spinlock_t arpnat_lock = SPIN_LOCK_UNLOCKED;
++static uint8_t bootpnat = 1;
++static uint32_t expires = FLUSHTIMEOUT;
++
++__STATIC struct mac2ip* find_mac_nat(struct hlist_head* head, const uint8_t* mac)
++{
++    struct mac2ip* tpos;
++    struct mac2ip* result = NULL;
++    struct hlist_node* pos;
++    struct hlist_node* n;
++    hlist_for_each_entry_safe(tpos, pos, n, head, node)
++    {
++	if (memcmp(tpos->data.mac, mac, ETH_ALEN) == 0)
++	{
++            result = tpos;
++	    break;
++	}
++	if (tpos->data.expires < jiffies)
++	{
++	    hlist_del(pos);
++	    kfree(tpos);
++	}
++    }
++    return result;
++}
++
++__STATIC struct mac2ip* find_ip_nat(struct hlist_head* head, uint32_t ip)
++{
++    struct mac2ip* tpos;
++    struct mac2ip* result = NULL;
++    struct hlist_node* pos;
++    struct hlist_node* n;
++
++    hlist_for_each_entry_safe(tpos, pos, n, head, node)
++    {
++	if (tpos->data.ip == ip)
++	{
++            result = tpos;
++	    break;
++	}
++	if (tpos->data.expires < jiffies)
++	{
++	    hlist_del(pos);
++	    kfree(tpos);
++	}
++    }
++    return result;
++}
++
++__STATIC void free_arp_nat(struct hlist_head* head)
++{
++    struct mac2ip* tpos;
++    struct hlist_node* pos;
++    struct hlist_node* n;
++    hlist_for_each_entry_safe(tpos, pos, n, head, node)
++    {
++        hlist_del(pos);
++	kfree(tpos);
++    }
++}
++
++__STATIC struct mac2ip* update_arp_nat(struct hlist_head* head, const uint8_t* mac, uint32_t ip)
++{
++    struct mac2ip* entry;
++
++    entry = find_mac_nat(head, mac);
++    if (entry)
++	goto done;
++
++    entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
++    if (!entry)
++	return NULL;
++    INIT_HLIST_NODE(&entry->node);
++    hlist_add_head(&entry->node, head);
++done:
++    memcpy(entry->data.mac, mac, ETH_ALEN);
++    entry->data.ip = ip;
++    entry->data.expires = jiffies + expires * HZ;
++
++    return entry;
++}
++
++#ifdef CONFIG_PROC_FS
++__STATIC int arpnat_cache_stat_get_info(char *buffer, char **start, off_t offset, int length)
++{
++    	int len = 0;
++	struct mac2ip* tpos;
++	struct hlist_node* pos;
++	struct hlist_node* n;
++	unsigned long flags;
++        uint32_t exp;
++
++	spin_lock_irqsave(&arpnat_lock, flags);
++	hlist_for_each_entry_safe(tpos, pos, n, &arpnat_table, node)
++	{
++	    if (tpos->data.expires < jiffies)
++	    {
++		hlist_del(pos);
++		kfree(tpos);
++                continue;
++	    }
++	    exp = tpos->data.expires - jiffies;
++	    len += sprintf(buffer + len, STRMAC" %8u.%02u "STRIP"\n", MAC2STR(tpos->data.mac), exp / HZ, exp % HZ, IP2STR(tpos->data.ip));
++	}
++        spin_unlock_irqrestore(&arpnat_lock, flags);
++	len -= offset;
++	if (len > length)
++		len = length;
++	if (len < 0)
++		len = 0;
++	*start = buffer + offset;
++  	return len;
++}
++
++__STATIC int arpnat_write(struct file *file, const char *buffer,
++			   unsigned long count, void *data)
++{
++    	/** arpnat entry expiration time in seconds
++	 *  debug enabled/disabled
++	 *  bootpnat enabled/disabled
++	 **/
++    	char buf[80];
++	int d, b;
++
++    	if (copy_from_user(buf, buffer, count < sizeof(buf) ? count : sizeof(buf)))
++		return -EFAULT;
++        if (sscanf(buf, "%u %d %d", &expires, &d, &b) != 3)
++		return -EINVAL;
++	debug = d;
++	bootpnat = b;
++
++  	return count;
++}
++
++__STATIC int arpnat_get_info(char *buffer, char **start, off_t offset, int length)
++{
++    	int len = 0;
++	len += sprintf(buffer + len, "ARPNAT Expiration: %u\nDebug: %d\nBOOTPNAT: %d\n", expires, debug, bootpnat);
++	len -= offset;
++	if (len > length)
++		len = length;
++	if (len < 0)
++		len = 0;
++	*start = buffer + offset;
++  	return len;
++}
++#endif
++
++/*
++__STATIC int ebt_target_arpnat(struct sk_buff *pskb, unsigned int hooknr,
++   const struct net_device *in, const struct net_device *out,
++   const void *data, unsigned int datalen)
++*/
++static unsigned int ebt_target_arpnat(struct sk_buff *pskb, const struct xt_target_param *par)
++{
++    const struct net_device *in  =  par->in;
++    const struct net_device *out =  par->out;
++
++    struct ebt_nat_info *info = (struct ebt_nat_info *) par->targinfo;
++
++    struct arphdr *ah = NULL;
++    struct arphdr _arph;
++
++
++    //used for target only
++    uint8_t* eth_smac = eth_hdr(pskb)->h_source;
++    uint8_t* eth_dmac = eth_hdr(pskb)->h_dest;
++    uint32_t* arp_sip = NULL;
++    uint8_t* arp_smac = NULL;
++    uint32_t* arp_dip = NULL;
++    uint8_t* arp_dmac = NULL;
++    struct mac2ip* entry = NULL;
++    unsigned long flags;
++
++    if (eth_hdr(pskb)->h_proto == __constant_htons(ETH_P_ARP))
++    {
++	ah = skb_header_pointer(pskb, 0, sizeof(_arph), &_arph);
++	if (ah->ar_hln == ETH_ALEN && ah->ar_pro == htons(ETH_P_IP) &&
++	    ah->ar_pln == 4)
++	{
++	    unsigned char *raw = skb_network_header(pskb);
++	    arp_sip = (uint32_t*)(raw + sizeof(struct arphdr) + (arp_hdr(pskb)->ar_hln));
++	    arp_smac = raw + sizeof(struct arphdr);
++	    arp_dip = (uint32_t*)(raw + sizeof(struct arphdr) + (2*(arp_hdr(pskb)->ar_hln)) + arp_hdr(pskb)->ar_pln);
++	    arp_dmac = raw + sizeof(struct arphdr) + arp_hdr(pskb)->ar_hln + arp_hdr(pskb)->ar_pln;
++	}
++	else
++	{
++            ah = NULL;
++	}
++    }
++    if (in)
++    {
++	if (ah)
++	{
++	    spin_lock_irqsave(&arpnat_lock, flags);
++	    entry = find_ip_nat(&arpnat_table, *arp_dip);
++	    switch (ah->ar_op)
++	    {
++	    case __constant_htons(ARPOP_REPLY):
++	    case __constant_htons(ARPOP_REQUEST):
++		if (entry)
++		{
++		    uint32_t dip = *arp_dip;
++		    uint32_t sip = inet_select_addr(in->br_port->br->dev, dip, RT_SCOPE_LINK);
++		    if (! (eth_dmac[0] & 1))
++		    {
++			if (debug)
++			    printk("IN ARPNAT: "STRMAC" -> "STRMAC"\n", MAC2STR(eth_dmac), MAC2STR(entry->data.mac));
++			memcpy(arp_dmac, entry->data.mac, ETH_ALEN);
++			memcpy(eth_dmac, entry->data.mac, ETH_ALEN);
++			(pskb)->pkt_type = (dip != sip) ? PACKET_OTHERHOST : (pskb)->pkt_type;
++		    }
++		    spin_unlock_irqrestore(&arpnat_lock, flags);
++		    /*if (dip != sip)
++		    {
++                        if (debug)
++			    printk("SEND ARP REQUEST: "STRIP" -> "STRIP"\n", IP2STR(sip), IP2STR(dip));
++			arp_send(ARPOP_REQUEST, ETH_P_ARP, dip, &in->br_port->br->dev, sip, NULL, in->br_port->br->dev.dev_addr, NULL);
++		    }*/
++		    return info->target;
++		}
++		break;
++	    }
++            spin_unlock_irqrestore(&arpnat_lock, flags);
++	}                                                                     
++	else if (eth_hdr(pskb)->h_proto == __constant_htons(ETH_P_IP))
++	{
++	    struct iphdr *iph = ip_hdr(pskb);
++	    struct udphdr *uh = NULL;
++	    if (bootpnat && iph->protocol == htons(IPPROTO_UDP) && !(iph->frag_off & htons(IP_OFFSET)))
++	    {
++		uh = (struct udphdr*)((u_int32_t *)iph + iph->ihl);
++		if (uh->dest == htonl(67))
++		{
++		    //do something illegal for BOOTP
++		    uint32_t* giaddrp = (uint32_t*)(((uint8_t*)uh) + sizeof(*uh) + GIADDR_OFFSET);
++		    uint8_t* mac = (uint8_t*)(giaddrp + 1);
++		    uint32_t ihl = iph->ihl << 2;
++		    uint32_t size = (pskb)->len - ihl;
++                    uint32_t orig_daddr = iph->daddr;
++
++		    spin_lock_irqsave(&arpnat_lock, flags);
++		    entry = find_mac_nat(&arpnat_table, mac);
++		    if (entry)
++			iph->daddr = entry->data.ip;
++		    else
++			iph->daddr = 0xffffffff;
++		    spin_unlock_irqrestore(&arpnat_lock, flags);
++                    if (debug)
++			printk("IN BOOTPRELAY: "STRMAC"["STRIP"] -> "STRMAC"["STRIP"]\n",
++			       MAC2STR(eth_dmac), IP2STR(orig_daddr), MAC2STR(mac), IP2STR(iph->daddr));
++                    memcpy(eth_dmac, mac, ETH_ALEN);
++		    *giaddrp = 0;
++                    uh->dest = htonl(68);
++                    iph->check = 0;
++		    uh->check = 0;
++                    iph->check = ip_fast_csum((uint8_t*)iph, iph->ihl);
++		    (pskb)->csum = csum_partial((uint8_t*)iph + ihl, size, 0);
++		    uh->check = csum_tcpudp_magic(iph->saddr, iph->daddr,
++						  size, iph->protocol,
++						  (pskb)->csum);
++		    if (uh->check == 0)
++			uh->check = 0xFFFF;
++		    return info->target;
++		}
++		else
++                    goto HANDLE_IP_PKT;
++	    }
++	    else
++	    {
++	    HANDLE_IP_PKT:
++		spin_lock_irqsave(&arpnat_lock, flags);
++		entry = find_ip_nat(&arpnat_table, iph->daddr);
++		if (entry)
++		{
++                    //to me
++		    if (inet_confirm_addr( __in_dev_get_rcu(in->br_port->br->dev),  0, entry->data.ip, RT_SCOPE_HOST))
++		    {
++			if (debug)
++			    printk("IP PKT TO ME: "STRMAC"["STRIP"] -> "STRMAC"[type: %d]\n",
++				   MAC2STR(eth_dmac), IP2STR(iph->daddr), MAC2STR(in->br_port->br->dev->dev_addr), (pskb)->pkt_type);
++			memcpy(eth_dmac, in->br_port->br->dev->dev_addr, ETH_ALEN);
++		    }
++		    else
++		    {
++			if (debug)
++			    printk("IP PKT TO OTHER: "STRMAC"["STRIP"] -> "STRMAC"[type: %d]\n",
++				   MAC2STR(eth_dmac), IP2STR(iph->daddr), MAC2STR(entry->data.mac), (pskb)->pkt_type);
++			memcpy(eth_dmac, entry->data.mac, ETH_ALEN);
++			(pskb)->pkt_type = PACKET_OTHERHOST;
++		    }
++		    spin_unlock_irqrestore(&arpnat_lock, flags);
++		    return info->target;
++		}
++		spin_unlock_irqrestore(&arpnat_lock, flags);
++	    }
++	}
++	if (! (eth_dmac[0] & 1))
++	{
++	    if (memcmp(in->br_port->br->dev->dev_addr, eth_dmac, ETH_ALEN) &&
++		memcmp(in->dev_addr, eth_dmac, ETH_ALEN))
++                return EBT_DROP;
++	    spin_lock_irqsave(&arpnat_lock, flags);
++	    entry = find_mac_nat(&arpnat_table, eth_dmac);
++	    if (entry)
++		memcpy(eth_dmac, entry->data.mac, ETH_ALEN);
++	    else
++                memcpy(eth_dmac, in->br_port->br->dev->dev_addr, ETH_ALEN);
++	    spin_unlock_irqrestore(&arpnat_lock, flags);
++	}
++    }
++    else if (out)
++    {
++	if (ah)
++	{
++	    switch (ah->ar_op)
++	    {
++	    case __constant_htons(ARPOP_REQUEST):
++	    case __constant_htons(ARPOP_REPLY):
++                spin_lock_irqsave(&arpnat_lock, flags);
++		update_arp_nat(&arpnat_table, arp_smac, *arp_sip);
++                spin_unlock_irqrestore(&arpnat_lock, flags);
++		/* do BR ip lookup */
++		if (inet_confirm_addr( __in_dev_get_rcu(out->br_port->br->dev), 0, *arp_dip, RT_SCOPE_HOST))
++		{
++                    return info->target;
++		}
++                //pskb = skb_unshare(pskb, GFP_ATOMIC);
++		eth_smac = eth_hdr(pskb)->h_source;
++		arp_smac = skb_network_header(pskb) + sizeof(struct arphdr);
++                if (debug)
++		    printk("OUT ARPNAT: "STRMAC" -> "STRMAC"\n", MAC2STR(eth_smac), MAC2STR(out->dev_addr));
++		memcpy(arp_smac, out->dev_addr, ETH_ALEN);
++		memcpy(eth_smac, out->dev_addr, ETH_ALEN);
++                return info->target;
++		break;
++	    }
++	}
++	else if (bootpnat && eth_hdr(pskb)->h_proto == __constant_htons(ETH_P_IP) &&
++		memcmp(out->br_port->br->dev->dev_addr, eth_smac, ETH_ALEN))
++	{
++	    struct iphdr *iph = ip_hdr(pskb);
++	    struct udphdr *uh = NULL;
++	    if (iph->protocol == htons(IPPROTO_UDP) && !(iph->frag_off & htons(IP_OFFSET)))
++	    {
++		uh = (struct udphdr*)((u_int32_t *)iph + iph->ihl);
++		if (uh->dest == htonl(67))
++		{
++		    //do something illegal for BOOTP
++		    uint32_t giaddr = inet_select_addr(out->br_port->br->dev, iph->daddr, RT_SCOPE_LINK);
++		    uint32_t* giaddrp = (uint32_t*)(((uint8_t*)uh) + sizeof(*uh) + GIADDR_OFFSET);
++		    uint32_t ihl = iph->ihl << 2;
++		    uint32_t size = (pskb)->len - ihl;
++                    if (debug)
++			printk("OUT BOOTPRELAY: "STRIP" -> "STRIP"\n",
++			       IP2STR(*giaddrp), IP2STR(giaddr));
++		    *giaddrp = giaddr;
++		    uh->check = 0;
++		    (pskb)->csum = csum_partial((uint8_t*)iph + ihl, size, 0);
++		    uh->check = csum_tcpudp_magic(iph->saddr, iph->daddr,
++						    size, iph->protocol,
++						    (pskb)->csum);
++		    if (uh->check == 0)
++			uh->check = 0xFFFF;
++		}
++	    }
++	}
++	memcpy(eth_smac, out->dev_addr, ETH_ALEN);
++    }
++    return info->target;
++}
++
++/*
++static int ebt_target_nat_arpcheck(const char *tablename, unsigned int hookmask,
++   const struct ebt_entry *e, void *data, unsigned int datalen)
++*/
++static bool ebt_target_nat_arpcheck(const struct xt_tgchk_param *par)
++{
++	return true;
++}
++static struct xt_target arpnat =
++{
++	.name		= EBT_ARPNAT_TARGET,
++	.revision	= 0,
++	.family		= NFPROTO_BRIDGE,
++	.table		= "nat",
++	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_POST_ROUTING) |  (1 << NF_BR_PRE_ROUTING) ,
++	.target		= ebt_target_arpnat, 
++	.checkentry	= ebt_target_nat_arpcheck,
++	.targetsize	= XT_ALIGN(sizeof(struct ebt_nat_info)),
++	.me		= THIS_MODULE
++};
++
++static int __init init(void)
++{
++//#ifdef CONFIG_PROC_FS
++//    	struct proc_dir_entry *proc_arpnat = proc_net_create("arpnat", 0, arpnat_get_info);
++//	if (proc_arpnat)
++//                proc_arpnat->write_proc = arpnat_write;
++//    	proc_net_create("arpnat_cache", 0, arpnat_cache_stat_get_info);
++//#endif
++	return xt_register_target(&arpnat);
++}
++
++static void __exit fini(void)
++{
++	xt_unregister_target(&arpnat);
++	free_arp_nat(&arpnat_table);
++//#ifdef CONFIG_PROC_FS
++//    proc_net_remove("arpnat");
++//    proc_net_remove("arpnat_cache");
++//#endif
++}
++
++module_init(init);
++module_exit(fini);
++MODULE_LICENSE("GPL");
+--- linux-old/net/bridge/br_fdb.c	2009-09-15 13:46:05.000000000 -0400
++++ linux-2.6.30.7/net/bridge/br_fdb.c	2009-09-22 19:52:51.000000000 -0400
+@@ -415,3 +415,5 @@
+ 		spin_unlock(&br->hash_lock);
+ 	}
+ }
++EXPORT_SYMBOL(br_fdb_get);
++
+--- linux-2.6.30.7-orig/net/bridge/netfilter/Makefile	2009-09-15 13:46:05.000000000 -0400
++++ linux-2.6.30.7/net/bridge/netfilter/Makefile	2009-09-20 16:04:20.000000000 -0400
+@@ -27,6 +27,7 @@
+ obj-$(CONFIG_BRIDGE_EBT_DNAT) += ebt_dnat.o
+ obj-$(CONFIG_BRIDGE_EBT_REDIRECT) += ebt_redirect.o
+ obj-$(CONFIG_BRIDGE_EBT_SNAT) += ebt_snat.o
++obj-$(CONFIG_BRIDGE_EBT_ARPNAT) += ebt_arpnat.o
+ 
+ # watchers
+ obj-$(CONFIG_BRIDGE_EBT_LOG) += ebt_log.o
+--- linux-2.6.30.7-orig/net/bridge/netfilter/Kconfig	2009-09-15 13:46:05.000000000 -0400
++++ linux-2.6.30.7/net/bridge/netfilter/Kconfig	2009-09-20 16:05:32.000000000 -0400
+@@ -177,6 +177,16 @@
+ 	  source address of frames.
+ 
+ 	  To compile it as a module, choose M here.  If unsure, say N.
++
++config BRIDGE_EBT_ARPNAT
++	tristate "ebt: arpnat target support"
++	depends on BRIDGE_NF_EBTABLES
++	help
++	  This option adds the ARP match, which allows ARP and RARP header field
++	  filtering
++ 
++	  To compile it as a module, choose M here. If unsure, say N.
++
+ #
+ # watchers
+ #
+--- linux-2.6.30.7-orig/include/linux/netfilter_bridge/ebt_nat.h	2009-09-15 13:46:05.000000000 -0400
++++ linux-2.6.30.7/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 16:06:35.000000000 -0400
+@@ -10,5 +10,6 @@
+ };
+ #define EBT_SNAT_TARGET "snat"
+ #define EBT_DNAT_TARGET "dnat"
++#define EBT_ARPNAT_TARGET "arpnat"
+ 
+ #endif
+--- linux-2.6.30.7-orig/net/ipv4/devinet.c	2009-09-15 13:46:05.000000000 -0400
++++ linux-2.6.30.7/net/ipv4/devinet.c	2009-09-20 16:07:17.000000000 -0400
+@@ -1674,3 +1674,4 @@
+ EXPORT_SYMBOL(inetdev_by_index);
+ EXPORT_SYMBOL(register_inetaddr_notifier);
+ EXPORT_SYMBOL(unregister_inetaddr_notifier);
++EXPORT_SYMBOL(inet_confirm_addr);
